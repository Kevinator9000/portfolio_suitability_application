
# ###  This is dummy data for testing to avoid having to enter info in Questionary for testing.  DELETE WHEN UNNEEDED
# full_name = "Jacob"
# phone_number = "713-555-7834"
# email_address = "cdb@bcg.law"
# annual_income = 10000
# investing_experience = 10
# investment_amount = 10000
# annual_expenses = 5000
# income_stability = "Yes"
# risk_level = "Moderate"
# investment_strategy = "Growth/Value"
# investment_length = "1yr"
    

#cumulative_return_client_weight = cumulative_returns_benchmark["IEF"] * weight[0] + cumulative_returns_benchmark["LQD"] * weight[1] + cumulative_returns_benchmark["HYG"] * weight[2] + cumulative_returns_benchmark["IAGG"] * weight[3] + cumulative_returns_benchmark["EMHY"] * weight[4] + cumulative_returns_benchmark["SPY"] * weight[5] + cumulative_returns_benchmark["IJH"] * weight[6] + cumulative_returns_benchmark["IJR"] * weight[7] + cumulative_returns_benchmark["IXUS"] * weight[8] + cumulative_returns_benchmark["IEMG"] * weight[9]
#get_MC_simulation(closing_prices_benchmark_df, )
#create_info_img(full_name, phone_number, email_address, annual_income, income_stability, annual_expenses, investment_amount, investment_length, risk_level, investment_strategy)


#import sqlalchemy
#import requests
#import json
#from pathlib import Path
#import matplotlib
# from mailer import Mailer
#import questionary
#from questionary.constants import NO, YES, YES_OR_NO
#import sqlalchemy
#import hvplot.pandas

# def save_vis_daily_return_distribution_client(daily_returns_df_client):

#     fig, ax = plt.subplots()
#     fig.set_figheight(10)
#     fig.set_figwidth(14)
#     ax.spines['top'].set_color('none')
#     ax.spines['right'].set_color('none')
#     ax.set(title = "Daily Return Distribution Client Profile\n(2019-2022)",
#         xlabel = "Daily Return",
#         ylabel = "Frequency")
        
#     plt.hist(daily_returns_df_client, color='#2f852a )

#     plt.savefig("./img/daily_return_client.png")
        # This graph uses daily return distribution to compare each component of the program 
        # selected ETF. We can see the entire portfolio broken down into specific assets and compare
        # their daily return distribution.
        
        # scrapped

# def save_vis_daily_return_distribution_benchmark(daily_returns_df_benchmark):
#     first = daily_returns_df_benchmark['QQQ']
#     second = daily_returns_df_benchmark["SPY"]
#     third = daily_returns_df_benchmark["IEF"]
#     fourth = daily_returns_df_benchmark["DIA"]

#     fig, ax = plt.subplots()
#     fig.set_figheight(10)
#     fig.set_figwidth(14)
#     ax.spines['top'].set_color('none')
#     ax.spines['right'].set_color('none')
#     ax.set(title = "Daily Return Distribution Benchmarks\n(2019-2022)",
#         xlabel = "Daily Return",
#         ylabel = "Frequency")

#     plt.hist(fourth, bins=10, color='#c491d9', label="DIA")
#     plt.hist(second, bins=10, color='#F8A241', label="SPY")
#     plt.hist(first, bins=10, color='#f0f06e', label="QQQ")
#     plt.hist(third, bins=10, color='#4f92ff', label="IEF")
#    plt.savefig("./img/daily_return_benchmark.png")
     # Scrapped